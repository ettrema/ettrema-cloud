
package com.ettrema.backup;

import com.ettrema.backup.account.AccountUtils;
import com.ettrema.backup.config.Dir;
import com.ettrema.backup.config.Job;
import com.ettrema.backup.config.LocalRepo;
import com.ettrema.backup.config.Repo;
import com.ettrema.backup.config.Root;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;

public class BackupLocations extends javax.swing.JPanel {

    private JFrame parentFrame;
    
    private final BackupLocationPanel pics;
    private final BackupLocationPanel vids;
    private final BackupLocationPanel music;
    private final BackupLocationPanel docs;
    private final List<BackupLocationPanel> locationPanels;    

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.add( new BackupLocations());
                frame.setVisible(true);
            }
        });
    }    
    
    public BackupLocations() {
        initComponents();
        locationPanels = new ArrayList<BackupLocationPanel>();
        pics = addLocation( "Pictures", AccountUtils.defaultPicsLocation());
        vids = addLocation( "Videos", AccountUtils.defaultVideosLocation() );
        music = addLocation( "Music", AccountUtils.defaultMusicLocation() );
        docs = addLocation( "Documents", AccountUtils.defaultDocumentsLocation() );        
    }

    private BackupLocationPanel addLocation( String text, File defaultDir ) {
        BackupLocationPanel pnl = new BackupLocationPanel( parentFrame, text, defaultDir );
        int y = locationPanels.size() * 32 + 10;
        pnl.setLocation( 0, y );
        pnl.setSize( 570, 30 );
        pnl.setVisible( true );
        pnlLocations.add( pnl );
        locationPanels.add( pnl );
        //this.setComponentZOrder( pnl, 0);

        return pnl;
    }    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlOuter = new javax.swing.JPanel();
        pnlContent = new javax.swing.JPanel();
        pnlLocations = new javax.swing.JPanel();
        pnlLocationsSubheading = new javax.swing.JLabel();
        pnlText2 = new javax.swing.JLabel();
        txtOtherDevice = new javax.swing.JTextField();
        btnOtherDeviceBrowse = new javax.swing.JButton();
        btnOtherDeviceClear = new javax.swing.JButton();
        lblOtherDeviceText = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.ettrema.backup.BackupApplication.class).getContext().getResourceMap(BackupLocations.class);
        setBackground(resourceMap.getColor("Form.background")); // NOI18N
        setName("Form"); // NOI18N
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        pnlOuter.setBackground(resourceMap.getColor("pnlOuter.background")); // NOI18N
        pnlOuter.setMaximumSize(new java.awt.Dimension(680, 610));
        pnlOuter.setMinimumSize(new java.awt.Dimension(680, 610));
        pnlOuter.setName("pnlOuter"); // NOI18N
        pnlOuter.setLayout(null);

        pnlContent.setBackground(resourceMap.getColor("pnlContent.background")); // NOI18N
        pnlContent.setName("pnlContent"); // NOI18N
        pnlContent.setLayout(null);

        pnlLocations.setBackground(resourceMap.getColor("pnlLocations.background")); // NOI18N
        pnlLocations.setName("pnlLocations"); // NOI18N
        pnlLocations.setOpaque(false);

        javax.swing.GroupLayout pnlLocationsLayout = new javax.swing.GroupLayout(pnlLocations);
        pnlLocations.setLayout(pnlLocationsLayout);
        pnlLocationsLayout.setHorizontalGroup(
            pnlLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 570, Short.MAX_VALUE)
        );
        pnlLocationsLayout.setVerticalGroup(
            pnlLocationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );

        pnlContent.add(pnlLocations);
        pnlLocations.setBounds(10, 120, 570, 140);

        pnlLocationsSubheading.setFont(resourceMap.getFont("pnlLocationsSubheading.font")); // NOI18N
        pnlLocationsSubheading.setForeground(resourceMap.getColor("pnlLocationsSubheading.foreground")); // NOI18N
        pnlLocationsSubheading.setText(resourceMap.getString("pnlLocationsSubheading.text")); // NOI18N
        pnlLocationsSubheading.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        pnlLocationsSubheading.setName("pnlLocationsSubheading"); // NOI18N
        pnlContent.add(pnlLocationsSubheading);
        pnlLocationsSubheading.setBounds(0, 0, 440, 20);

        pnlText2.setFont(resourceMap.getFont("pnlText2.font")); // NOI18N
        pnlText2.setForeground(resourceMap.getColor("pnlText2.foreground")); // NOI18N
        pnlText2.setText(resourceMap.getString("pnlText2.text")); // NOI18N
        pnlText2.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        pnlText2.setName("pnlText2"); // NOI18N
        pnlText2.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        pnlContent.add(pnlText2);
        pnlText2.setBounds(0, 50, 590, 15);

        txtOtherDevice.setFont(resourceMap.getFont("txtOtherDevice.font")); // NOI18N
        txtOtherDevice.setForeground(resourceMap.getColor("txtOtherDevice.foreground")); // NOI18N
        txtOtherDevice.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtOtherDevice.setMargin(new java.awt.Insets(2, 7, 2, 7));
        txtOtherDevice.setMaximumSize(new java.awt.Dimension(680, 635));
        txtOtherDevice.setMinimumSize(new java.awt.Dimension(680, 635));
        txtOtherDevice.setName("txtOtherDevice"); // NOI18N
        txtOtherDevice.setPreferredSize(new java.awt.Dimension(680, 635));
        txtOtherDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOtherDeviceActionPerformed(evt);
            }
        });
        pnlContent.add(txtOtherDevice);
        txtOtherDevice.setBounds(100, 380, 225, 25);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(com.ettrema.backup.BackupApplication.class).getContext().getActionMap(BackupLocations.class, this);
        btnOtherDeviceBrowse.setAction(actionMap.get("onBrowseOtherDevice")); // NOI18N
        btnOtherDeviceBrowse.setText(resourceMap.getString("btnOtherDeviceBrowse.text")); // NOI18N
        btnOtherDeviceBrowse.setName("btnOtherDeviceBrowse"); // NOI18N
        btnOtherDeviceBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtherDeviceBrowseActionPerformed(evt);
            }
        });
        pnlContent.add(btnOtherDeviceBrowse);
        btnOtherDeviceBrowse.setBounds(339, 381, 73, 25);

        btnOtherDeviceClear.setAction(actionMap.get("onClearOtherDevice")); // NOI18N
        btnOtherDeviceClear.setText(resourceMap.getString("btnOtherDeviceClear.text")); // NOI18N
        btnOtherDeviceClear.setName("btnOtherDeviceClear"); // NOI18N
        btnOtherDeviceClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOtherDeviceClearActionPerformed(evt);
            }
        });
        pnlContent.add(btnOtherDeviceClear);
        btnOtherDeviceClear.setBounds(420, 381, 73, 25);

        lblOtherDeviceText.setFont(resourceMap.getFont("lblOtherDeviceText.font")); // NOI18N
        lblOtherDeviceText.setForeground(resourceMap.getColor("lblOtherDeviceText.foreground")); // NOI18N
        lblOtherDeviceText.setText(resourceMap.getString("lblOtherDeviceText.text")); // NOI18N
        lblOtherDeviceText.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblOtherDeviceText.setName("lblOtherDeviceText"); // NOI18N
        lblOtherDeviceText.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        pnlContent.add(lblOtherDeviceText);
        lblOtherDeviceText.setBounds(13, 330, 560, 15);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/appinterface/Assets/signUpPanel2.png"))); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        pnlContent.add(jLabel2);
        jLabel2.setBounds(0, 85, 591, 352);

        jLabel12.setFont(resourceMap.getFont("jLabel12.font")); // NOI18N
        jLabel12.setForeground(resourceMap.getColor("jLabel12.foreground")); // NOI18N
        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel12.setName("jLabel12"); // NOI18N
        jLabel12.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        pnlContent.add(jLabel12);
        jLabel12.setBounds(0, 36, 590, 15);

        pnlOuter.add(pnlContent);
        pnlContent.setBounds(2, -1, 600, 450);

        add(pnlOuter);
    }// </editor-fold>//GEN-END:initComponents

    private void txtOtherDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOtherDeviceActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_txtOtherDeviceActionPerformed

    private void btnOtherDeviceBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtherDeviceBrowseActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_btnOtherDeviceBrowseActionPerformed

    private void btnOtherDeviceClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOtherDeviceClearActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_btnOtherDeviceClearActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOtherDeviceBrowse;
    private javax.swing.JButton btnOtherDeviceClear;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblOtherDeviceText;
    private javax.swing.JPanel pnlContent;
    private javax.swing.JPanel pnlLocations;
    private javax.swing.JLabel pnlLocationsSubheading;
    private javax.swing.JPanel pnlOuter;
    private javax.swing.JLabel pnlText2;
    private javax.swing.JTextField txtOtherDevice;
    // End of variables declaration//GEN-END:variables


    public void load(Job job) {
        if( job == null ) {
            return ;
        }
        for( Repo r : job.getRepos() ) {
            if( r instanceof LocalRepo) {
                initRepo((LocalRepo)r);
            }
        }
        for(BackupLocationPanel p : this.locationPanels) {
            p.setDirectory("");
        }
        for( Root root : job.getRoots()) {
            if( root.getRepoName().endsWith("Pictures") ) {
                pics.setDirectory(root.getFullPath());
                pics.setExcludedFolders(getExcludedFiles(root.getExclusions() ));

            } else if( root.getRepoName().endsWith("Videos") ) {
                vids.setDirectory(root.getFullPath());
                vids.setExcludedFolders(getExcludedFiles(root.getExclusions() ));

            } else if( root.getRepoName().endsWith("Music") ) {
                music.setDirectory(root.getFullPath());
                music.setExcludedFolders(getExcludedFiles(root.getExclusions() ));

            } else if( root.getRepoName().endsWith("Documents") ) {    
                docs.setDirectory(root.getFullPath());
                docs.setExcludedFolders(getExcludedFiles(root.getExclusions() ));

            }
        }
    }

    private void initRepo(LocalRepo localRepo) {
        txtOtherDevice.setText(localRepo.getTarget().getAbsolutePath());
    }

    void save(String accPath, Job job) {
        job.getRoots().clear();
        for( Root root : getRoots(accPath, job ) ) {
            job.getRoots().add( root );
        }        
    }
    
    public List<Root> getRoots(String accPath, Job job) {
        List<Root> list = new ArrayList<Root>();
        for( BackupLocationPanel pnl : locationPanels ) {
            Root root = pnl.toRoot(accPath, job);
            if( root != null ) {
                list.add( root );
            }
        }
        return list;
    }

    public File getOtherDeviceLocation() {
        String s = txtOtherDevice.getText();
        if( s == null || s.trim().length() == 0) {
            return null;
        } else {
            File f = new File(s);
            if( f.exists()) {
                return f;
            } else {
                return null;
            }
        }
    }

    private List<File> getExcludedFiles(List<Dir> exclusions) {
        List<File> list = new ArrayList<File>();
        for(Dir d : exclusions) {
            list.add(new File(d.getFullPath()));
        }
        return list;
    }
    
}
