/*
 * QueueView.java
 *
 * Created on 14/10/2010, 11:36:55 AM
 */
package com.ettrema.backup;

import com.ettrema.backup.view.QueueTableModel2;
import com.ettrema.backup.config.Repo;
import javax.swing.ImageIcon;
import com.ettrema.backup.config.Queue;
import com.ettrema.backup.config.QueueItem;
import com.ettrema.backup.engine.FileSyncer;
import com.ettrema.backup.event.QueueProcessEvent;
import com.ettrema.backup.event.ScanDirEvent;
import com.ettrema.backup.event.ScanEvent;
import com.ettrema.backup.queue.QueueManager;
import com.ettrema.event.Event;
import com.ettrema.event.EventListener;
import com.ettrema.event.EventManager;
import java.io.File;
import java.util.Calendar;
import javax.swing.SwingUtilities;

import static com.ettrema.backup.utils.TimeUtils.pad2;

/**
 *
 * @author brad
 */
public class QueueView extends javax.swing.JFrame implements EventListener {

	private static final long serialVersionUID = 1L;
	private final FileSyncer fileSyncer;
	private final EventManager eventManager;
	private final QueueManager queueProcessor;
	private final Queue queue;
	private final Repo repo;

	/** Creates new form QueueView */
	public QueueView(FileSyncer fileSyncer, EventManager eventManager, QueueManager queueProcessor, Queue queue, Repo repo) {
		this.queue = queue;
		this.fileSyncer = fileSyncer;
		this.repo = repo;
		this.queueProcessor = queueProcessor;
		this.eventManager = eventManager;
		this.setTitle("Queue: " + repo.getDescription());
		initComponents();
		TableUtils.setTimeColumn(tblQueue, "Started");
		TableUtils.setTimeColumn(tblQueue, "Completed");
//        TableRowSorter rowSorter = new TableRowSorter( tblQueue.getModel());
//        tblQueue.setRowSorter( rowSorter );


		File scanDir = fileSyncer.getCurrentScanDir(); 
		if (scanDir != null) {
			lblCurrentDirVal.setText(scanDir.getAbsolutePath());
		}

		eventManager.registerEventListener(this, ScanDirEvent.class);
		eventManager.registerEventListener(this, ScanEvent.class);
		eventManager.registerEventListener(this, QueueProcessEvent.class);

		ImageIcon imageIcon = new ImageIcon(getClass().getResource("/logo16x16.png"), "");
		setIconImage(imageIcon.getImage());

		showNextScan();

		initCurrent();

	}

	private void showNextScan() {
		lblCurrentDirVal.setText("Next scan at " + getNextScanText());
	}

	private String getNextScanText() {
		long nextScanTime = fileSyncer.delayUntilNextScanSecs() * 1000 + System.currentTimeMillis(); 
		Calendar cal = Calendar.getInstance();
		cal.setTimeInMillis(nextScanTime);
		String nextScan = pad2(cal.get(Calendar.HOUR_OF_DAY)) + ":" + pad2(cal.get(Calendar.MINUTE));
		return nextScan;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pblOuter = new javax.swing.JPanel();
        pnlCurrentTask = new javax.swing.JPanel();
        lblCurrentScan = new javax.swing.JLabel();
        lblCurrentDirVal = new javax.swing.JLabel();
        lblCurrentProcessing = new javax.swing.JLabel();
        lblCurrentFile = new javax.swing.JLabel();
        lblStatus = new javax.swing.JLabel();
        lblCurrentStatus = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblQueue = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.ettrema.backup.BackupApplication.class).getContext().getResourceMap(QueueView.class);
        pblOuter.setBackground(resourceMap.getColor("pblOuter.background")); // NOI18N
        pblOuter.setName("pblOuter"); // NOI18N

        pnlCurrentTask.setBackground(resourceMap.getColor("pnlCurrentTask.background")); // NOI18N
        pnlCurrentTask.setName("pnlCurrentTask"); // NOI18N

        lblCurrentScan.setFont(resourceMap.getFont("lblCurrentScan.font")); // NOI18N
        lblCurrentScan.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCurrentScan.setText(resourceMap.getString("lblCurrentScan.text")); // NOI18N
        lblCurrentScan.setName("lblCurrentScan"); // NOI18N

        lblCurrentDirVal.setBackground(resourceMap.getColor("lblCurrentDirVal.background")); // NOI18N
        lblCurrentDirVal.setFont(resourceMap.getFont("lblCurrentDirVal.font")); // NOI18N
        lblCurrentDirVal.setText(resourceMap.getString("lblCurrentDirVal.text")); // NOI18N
        lblCurrentDirVal.setName("lblCurrentDirVal"); // NOI18N

        lblCurrentProcessing.setFont(resourceMap.getFont("lblCurrentProcessing.font")); // NOI18N
        lblCurrentProcessing.setText(resourceMap.getString("lblCurrentProcessing.text")); // NOI18N
        lblCurrentProcessing.setName("lblCurrentProcessing"); // NOI18N

        lblCurrentFile.setFont(resourceMap.getFont("lblCurrentFile.font")); // NOI18N
        lblCurrentFile.setText(resourceMap.getString("lblCurrentFile.text")); // NOI18N
        lblCurrentFile.setName("lblCurrentFile"); // NOI18N

        lblStatus.setFont(resourceMap.getFont("lblStatus.font")); // NOI18N
        lblStatus.setText(resourceMap.getString("lblStatus.text")); // NOI18N
        lblStatus.setName("lblStatus"); // NOI18N

        lblCurrentStatus.setFont(resourceMap.getFont("lblCurrentStatus.font")); // NOI18N
        lblCurrentStatus.setName("lblCurrentStatus"); // NOI18N

        javax.swing.GroupLayout pnlCurrentTaskLayout = new javax.swing.GroupLayout(pnlCurrentTask);
        pnlCurrentTask.setLayout(pnlCurrentTaskLayout);
        pnlCurrentTaskLayout.setHorizontalGroup(
            pnlCurrentTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCurrentTaskLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCurrentTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCurrentProcessing)
                    .addComponent(lblCurrentScan, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCurrentTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCurrentStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .addComponent(lblCurrentFile, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE)
                    .addComponent(lblCurrentDirVal, javax.swing.GroupLayout.DEFAULT_SIZE, 392, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlCurrentTaskLayout.setVerticalGroup(
            pnlCurrentTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCurrentTaskLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCurrentTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCurrentDirVal, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCurrentScan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCurrentTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(pnlCurrentTaskLayout.createSequentialGroup()
                        .addComponent(lblCurrentProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblStatus))
                    .addGroup(pnlCurrentTaskLayout.createSequentialGroup()
                        .addComponent(lblCurrentFile, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblCurrentStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28))
        );

        jScrollPane1.setBackground(resourceMap.getColor("jScrollPane1.background")); // NOI18N
        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tblQueue.setFont(resourceMap.getFont("tblQueue.font")); // NOI18N
        tblQueue.setModel(new QueueTableModel2(queue));
        tblQueue.setName("tblQueue"); // NOI18N
        tblQueue.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblQueue);

        javax.swing.GroupLayout pblOuterLayout = new javax.swing.GroupLayout(pblOuter);
        pblOuter.setLayout(pblOuterLayout);
        pblOuterLayout.setHorizontalGroup(
            pblOuterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pblOuterLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(pnlCurrentTask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 581, Short.MAX_VALUE)
        );
        pblOuterLayout.setVerticalGroup(
            pblOuterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pblOuterLayout.createSequentialGroup()
                .addComponent(pnlCurrentTask, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
        );

        getContentPane().add(pblOuter, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCurrentDirVal;
    private javax.swing.JLabel lblCurrentFile;
    private javax.swing.JLabel lblCurrentProcessing;
    private javax.swing.JLabel lblCurrentScan;
    private javax.swing.JLabel lblCurrentStatus;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JPanel pblOuter;
    private javax.swing.JPanel pnlCurrentTask;
    private javax.swing.JTable tblQueue;
    // End of variables declaration//GEN-END:variables

	public void onEvent(final Event e) {
		SwingUtilities.invokeLater(new Runnable() {

			public void run() {
				System.out.println("QueueView: onEvent");
				if (e instanceof ScanDirEvent) {
					ScanDirEvent sd = (ScanDirEvent) e;
					lblCurrentDirVal.setText(sd.getScanDir().getAbsolutePath());
				} else if (e instanceof ScanEvent) {
					ScanEvent se = (ScanEvent) e;
					if (se.isFinished()) {
						Calendar cal = Calendar.getInstance();
						String time = pad2(cal.get(Calendar.HOUR_OF_DAY)) + pad2(cal.get(Calendar.MINUTE));
						lblCurrentDirVal.setText("Finished scan at: " + time + ", Next scan at " + getNextScanText());
					} else {
						lblCurrentDirVal.setText("Starting scan...");
					}
				} else if (e instanceof QueueProcessEvent) {
					QueueProcessEvent qpe = (QueueProcessEvent) e;
					QueueItem item = qpe.getItem();
					if (qpe.getRepo().getQueue() == queue) {
						setCurrent(item, qpe);
					}
				}

			}
		});
	}

	private void setCurrent(QueueItem item, QueueProcessEvent qpe) {
		lblCurrentFile.setText(item.getFileName());
		if (qpe != null) {
			lblCurrentStatus.setText(qpe.getStatus().toString());
		} else {
			lblCurrentStatus.setText("In progress");
		}
	}

	private void initCurrent() {
		QueueItem item = repo.getCurrent();
		if (item != null) {
			setCurrent(item, null);
		}
	}
}
