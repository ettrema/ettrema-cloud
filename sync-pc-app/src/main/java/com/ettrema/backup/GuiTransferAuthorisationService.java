/*
 * GuiTransferAuthorisationService.java
 *
 * Created on 4/01/2012, 4:52:56 PM
 */
package com.ettrema.backup;

import com.ettrema.backup.config.Config;
import com.ettrema.backup.config.DavRepo;
import com.ettrema.backup.config.Repo;
import com.ettrema.backup.engine.TransferAuthorisationService;
import com.ettrema.backup.queue.QueueInserter;
import com.ettrema.backup.utils.PathMunger;
import com.ettrema.httpclient.Folder;
import com.ettrema.httpclient.HttpException;
import com.ettrema.httpclient.Resource;
import java.io.File;
import java.io.IOException;

/**
 * This form should allow the user to choose which transfers to allow, and which
 * to decline.
 *
 * It should allow such decisions to be recorded as defaults with a flexible
 * rules mechanism.
 *
 * For example, when permitting uploads or downloads the user should be able to
 * select a maximum file size to automatically permit. Files larger then that
 * will still need manual authorisation.
 *
 * This should also allow users to choose when to upload/download new folders,
 * or to add them to an ignored list.
 *
 * @author brad
 */
public class GuiTransferAuthorisationService extends javax.swing.JFrame implements TransferAuthorisationService {

    //private final List<TransferAuthorisation> queue = new CopyOnWriteArrayList<TransferAuthorisation>();
    private final QueueInserter queueInserter;
    private final PathMunger pathMunger;
    private final Config config;

    public GuiTransferAuthorisationService(QueueInserter queueInserter, PathMunger pathMunger, Config config) {
        initComponents();
        this.queueInserter = queueInserter;
        this.pathMunger = pathMunger;
        this.config = config;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    public void requestDownload(DavRepo repo, Resource remote) {
        Long bytesToDownload = calcBytesToDownload(remote);
        String sPath = pathMunger.findFileFromUrl(config.getAllRoots(), remote.encodedUrl(), File.separator);
        File local = new File(sPath);
        queueInserter.enqueueDownload(repo, local, bytesToDownload);
    }

    public void resolveConflict(Resource r, File l) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void requestUpload(File l) {
        for (Repo r : config.getAllRepos()) {
            queueInserter.enqueueUpload(r, l);
        }
    }

    public void requestRemoteDelete(DavRepo repo, Resource r) {
        String sPath = pathMunger.findFileFromUrl(config.getAllRoots(), r.encodedUrl(), File.separator);
        File local = new File(sPath);
        queueInserter.enqueueRemoteDelete(local, repo);
    }

    public void requestDeleteLocal(File local) {
        queueInserter.enqueueLocalDelete(local);
    }
//	private interface TransferAuthorisation {
//	}
//
//	private class UploadTransferAuthorisation implements TransferAuthorisation {
//
//		private final File file;
//
//		public UploadTransferAuthorisation(File file) {
//			this.file = file;
//		}
//	}
//
//	private class DownloadFileTransferAuthorisation implements TransferAuthorisation {
//
//		private final com.ettrema.httpclient.File file;
//
//		public DownloadFileTransferAuthorisation(com.ettrema.httpclient.File file) {
//			this.file = file;
//		}
//	}
//
//	private class DownloadFolderTransferAuthorisation implements TransferAuthorisation {
//
//		private final Folder folder;
//
//		public DownloadFolderTransferAuthorisation(Folder folder) {
//			this.folder = folder;
//		}
//	}

    private Long calcBytesToDownload(Resource remote) throws IOException, HttpException {
        if (remote instanceof Folder) {
            Folder remoteFolder = (Folder) remote;
            return calcBytesToDownload(remoteFolder);
        } else {
            com.ettrema.httpclient.File remoteFile = (com.ettrema.httpclient.File) remote;
            return calcBytesToDownload(remoteFile);
        }        
    }
    
    private Long calcBytesToDownload(com.ettrema.httpclient.File remoteFile) {
        return remoteFile.contentLength;
    }

    private Long calcBytesToDownload(Folder remoteFolder) throws IOException, HttpException {
        long l = 0;
        for(Resource r : remoteFolder.children()) {
            l += calcBytesToDownload(r);
        }
        return l;
    }
}
