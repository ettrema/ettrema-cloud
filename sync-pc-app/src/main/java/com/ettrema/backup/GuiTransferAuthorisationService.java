/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GuiTransferAuthorisationService.java
 *
 * Created on 4/01/2012, 4:52:56 PM
 */
package com.ettrema.backup;

import com.ettrema.backup.engine.TransferAuthorisationService;
import com.ettrema.httpclient.Folder;
import com.ettrema.httpclient.Resource;
import java.io.File;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 *
 * @author brad
 */
public class GuiTransferAuthorisationService extends javax.swing.JFrame implements TransferAuthorisationService {

	private final List<TransferAuthorisation> queue = new CopyOnWriteArrayList<TransferAuthorisation>();

	public GuiTransferAuthorisationService() {
		initComponents();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
	public void requestDownload(Resource remote) {
		if (remote instanceof Folder) {
			queue.add(new DownloadFolderTransferAuthorisation((Folder)remote));
		} else {
			queue.add(new DownloadFileTransferAuthorisation((com.ettrema.httpclient.File)remote));
		}
	}

	public void resolveConflict(Resource r, File l) {
		throw new UnsupportedOperationException("Not supported yet.");
	}

	public void requestUpload(File l) {
		throw new UnsupportedOperationException("Not supported yet.");
	}

	private interface TransferAuthorisation {
	}

	private class UploadTransferAuthorisation implements TransferAuthorisation {

		private final File file;

		public UploadTransferAuthorisation(File file) {
			this.file = file;
		}
	}

	private class DownloadFileTransferAuthorisation implements TransferAuthorisation {

		private final com.ettrema.httpclient.File file;

		public DownloadFileTransferAuthorisation(com.ettrema.httpclient.File file) {
			this.file = file;
		}
	}

	private class DownloadFolderTransferAuthorisation implements TransferAuthorisation {

		private final Folder folder;

		public DownloadFolderTransferAuthorisation(Folder folder) {
			this.folder = folder;
		}
	}
}
