package com.ettrema.cloudsync.view;

import com.ettrema.cloudsync.view.FileTreeModel;
import it.cnr.imaa.essi.lablib.gui.checkboxtree.CheckboxTree;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.tree.TreePath;

/**
 *
 * @author brad
 */
public class ExlusionsTreeModal extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;
    private final Runnable callback;
    private final CheckboxTree tree;
    private final File root;
    private final FileTreeModel treeModel;
    private TreePath[] checkedPaths;

    /** Creates new form ExlusionsTreeModal */
    public ExlusionsTreeModal(java.awt.Frame parent, File root, Runnable callback) {
        super(parent, true);
        this.root = root;
        this.callback = callback;
        initComponents();
        treeModel = new FileTreeModel(root);
        tree = new CheckboxTree(treeModel);
        tree.setRowHeight(23);
        scrollPane.setViewportView(tree);
        //tree.setSize( this.getSize());
        tree.setVisible(true);
    }

    public void closeModal() {
        this.setVisible(false);
    }

    public void saveAndClose() {
        this.checkedPaths = tree.getCheckingRoots();
        callback.run();
        this.setVisible(false);
    }

    public void setChecked(List<File> checkedFolders) {
        if( checkedFolders == null ) {
            return ;
        }
        for (File f : checkedFolders) {
            File[] names = findNames(f);
            TreePath tp = new TreePath(names);
            tree.addCheckingPath(tp);
        }
    }

    public TreePath[] getCheckedPaths() {
        return checkedPaths;
    }


    private File[] findNames(File f) {
        List<File> list = new ArrayList<File>();
        findNames(f, list);
        File[] arr = new File[list.size()];
        list.toArray(arr);
        return arr;
    }


    private void findNames(File f, List<File> list) {
        if( f == null ) { // can happen if have changed root
            return;
        }
        if( f.equals(root) ) {
            list.add(root);
            return ;
        } else {
            findNames(f.getParentFile(), list);
            list.add(f);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlOuter = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        scrollPane = new javax.swing.JScrollPane();
        cmdCancel = new javax.swing.JButton();
        cmdOk = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        pnlOuter.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setText(org.openide.util.NbBundle.getMessage(ExlusionsTreeModal.class, "ExlusionsTreeModal.jLabel1.text")); // NOI18N

        cmdCancel.setText(org.openide.util.NbBundle.getMessage(ExlusionsTreeModal.class, "ExlusionsTreeModal.cmdCancel.text")); // NOI18N
        cmdCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCancelActionPerformed(evt);
            }
        });

        cmdOk.setText(org.openide.util.NbBundle.getMessage(ExlusionsTreeModal.class, "ExlusionsTreeModal.cmdOk.text")); // NOI18N
        cmdOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOuterLayout = new javax.swing.GroupLayout(pnlOuter);
        pnlOuter.setLayout(pnlOuterLayout);
        pnlOuterLayout.setHorizontalGroup(
            pnlOuterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOuterLayout.createSequentialGroup()
                .addContainerGap(222, Short.MAX_VALUE)
                .addComponent(cmdCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmdOk, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(pnlOuterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlOuterLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(pnlOuterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlOuterLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        pnlOuterLayout.setVerticalGroup(
            pnlOuterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOuterLayout.createSequentialGroup()
                .addContainerGap(271, Short.MAX_VALUE)
                .addGroup(pnlOuterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdOk)
                    .addComponent(cmdCancel))
                .addContainerGap())
            .addGroup(pnlOuterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlOuterLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(261, Short.MAX_VALUE)))
            .addGroup(pnlOuterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOuterLayout.createSequentialGroup()
                    .addContainerGap(46, Short.MAX_VALUE)
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(42, 42, 42)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlOuter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlOuter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdCancelActionPerformed
        closeModal();
    }//GEN-LAST:event_cmdCancelActionPerformed

    private void cmdOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdOkActionPerformed
        saveAndClose();
    }//GEN-LAST:event_cmdOkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdCancel;
    private javax.swing.JButton cmdOk;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel pnlOuter;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
