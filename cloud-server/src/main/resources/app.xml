<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">

    <bean id="notifier" class="com.ettrema.berry.admin.DailySummaryNotifier">
        <constructor-arg ref="notifier.email"/>
        <property name="message">
            <value>
                Daily Summary for ${sys.admin.domain}
                Last message: [last]
                Number of notifications: [count]
                See http://www.bradmcevoy.com:8035/monitor/[year]/[month]/[day]/index.html
            </value>
        </property>

    </bean>

    <bean id="notifier.email" class="com.ettrema.berry.admin.EmailNotifier">
        <constructor-arg ref="${mail.sender}" />
        <constructor-arg value="brad@bradmcevoy.com" />
        <constructor-arg value="brad@bradmcevoy.com" />
    </bean>

    <bean id="error.notifier" class="com.ettrema.web.manage.logging.WebErrorReporter">
        <constructor-arg ref="notifier" />
        <constructor-arg ref="current.user.service" />
        <constructor-arg ref="current.request.service" />
    </bean>

    <bean id="log.monitor" class="com.ettrema.utils.LogMonitorService">
        <constructor-arg value="${log.file}"/>
        <constructor-arg value="3000"/>
    </bean>

    <bean id="zip.service" class="com.ettrema.web.manage.deploy.ZipService"/>
    
    <bean id="deployment.service" class="com.ettrema.web.manage.deploy.DeploymentService">
        <constructor-arg ref="zip.service"/>
        <constructor-arg ref="code.resource.factory"/>
    </bean>

    <bean id="event.dispatcher" class="com.ettrema.event.ClydeEventDispatcherImpl"/>

    <bean id="mail.resource.factory" class="com.ettrema.web.ClydeMailResourceFactory">
        <constructor-arg ref="existing.resource.factory"/>
    </bean>

    <bean id="sql.backup.task" class="com.ettrema.scheduled.SqlBackupTask">
        <constructor-arg ref="current.date.service"/>
        <property name="sql" value="${db.backup.sql}"/>
        <property name="backupDir" value="${db.backup.dir}"/>
        <property name="notBeforeHour" value="${db.backup.notBeforeHour}"/>
        <property name="noLaterThenHour" value="${db.backup.noLaterThenHour}"/>
        <property name="intervalMinutes" value="${db.backup.intervalMinutes}"/>
    </bean>
        

    <bean id="clyde.timer.service" class="com.ettrema.process.ClydeTimerService">
        <constructor-arg ref="root.context.locator"/>
        <property name="scheduled">
            <list>
                <ref bean="sql.backup.task" />
            </list>
        </property>
    </bean>
    
    <bean id="asynch.proc" class="com.ettrema.grid.DefaultAsynchProcessor">
        <constructor-arg ref="root.context.locator"/>
        <constructor-arg ref="queue.manager"/>
    </bean>

    <bean id="queue.proc" class="com.ettrema.grid.DefaultQueueProcessor">
        <constructor-arg ref="root.context.locator"/>
        <constructor-arg ref="queue.manager"/>
        <constructor-arg value="${queue.proc.batchsize}"/>
        <constructor-arg value="${queue.proc.workers}"/>
    </bean>

    <bean id="vfs.provider.postgres" class="com.ettrema.vfs.PostgresVfsProvider">
        <constructor-arg ref="binary.manager"/>
        <constructor-arg ref="cache.rels.from.mem"/>
        <constructor-arg ref="cache.rels.to.mem"/>
        <constructor-arg ref="cache.lists.mem"/>
        <constructor-arg ref="cache.parentids.mem"/>
        <constructor-arg ref="cache.datanodes.mem"/>
    </bean>

    <bean id="authenticator" class="com.ettrema.web.security.EmailAuthenticator">
        <constructor-arg ref="recursive.authenticator"/>
        <constructor-arg ref="user.locator"/>
    </bean>

    <!-- unqualified names are recursively validated against each host in the tree, starting with the current. Qualified names are authenticated against the named host-->
    <bean id="recursive.authenticator" class="com.ettrema.web.security.RecursiveAuthenticator"/>

    <bean id="standardPermissionChecker" class="com.ettrema.web.security.ClydePermissionChecker"/>

    <bean id="userEditPermissionChecker" class="com.ettrema.web.security.EditOwnUserPermissionChecker">
        <constructor-arg ref="standardPermissionChecker"/>
    </bean>

    <bean id="permissionChecker" class="com.ettrema.web.security.SysAdminPermissionChecker">
        <constructor-arg ref="userEditPermissionChecker"/>
        <constructor-arg>
            <list>
                <value>${sys.admin.user}@${sys.admin.domain}</value>
            </list>
        </constructor-arg>
    </bean>

    <bean id="authoring.permission.service" class="com.ettrema.utils.DefaultAuthoringPermissionService"/>

    <bean id="permissions.authoriser" class="com.ettrema.web.security.PermissionsAuthoriser">
        <constructor-arg ref="permissionChecker"/>
        <constructor-arg ref="authoring.permission.service"/>
    </bean>

    <!-- this will disallow non-logged in access to secureRead resources-->
    <bean id="secureread.authoriser" class="com.ettrema.web.security.SecureReadAuthoriser">
        <constructor-arg ref="permissions.authoriser"/>
        <property name="securePropfind" value="false"/>
        <property name="securePropFindUserAgents" >
            <list>
                <value>gvfs</value>
            </list>
        </property>
    </bean>

    <!-- allow root users to do anything -->
    <!-- disabled for dev because is always root domain
    <bean id="rootdomain.authoriser" class="com.ettrema.web.security.RootDomainAuthoriser">
        <constructor-arg>
            <list>
                <value>${sys.admin.domain}</value>
            </list>
        </constructor-arg>
    </bean>
     -->

    <!-- Only allow users defined on the root domain to manage source-->
    <bean id="sourcepage.authoriser" class="com.ettrema.web.security.AdminOnlySourcePageAuthoriser">
        <constructor-arg>
            <list>
                <value>${sys.admin.domain}</value>
            </list>
        </constructor-arg>
    </bean>

    <bean id="authoriser" class="com.ettrema.web.security.MultipleAuthoriser">
        <constructor-arg>
            <list>
                <ref bean="sourcepage.authoriser"/>
<!-- disabled for dev
                <ref bean="rootdomain.authoriser"/>
-->
                <ref bean="secureread.authoriser"/>

                <!-- this will ensure that PROPFIND requests can only come from logged in users -->
                <bean class="com.ettrema.web.security.SecurePropFindAuthoriser"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="media.log.service" class="com.ettrema.media.MediaLogServiceImpl">
        <constructor-arg ref="image.service"/>
        <constructor-arg ref="event.manager"/>
        <constructor-arg ref="thumb.href.service"/>
        <property name="pageSize" value="50" />
    </bean>

    <bean id="mail.filter" class="com.ettrema.web.ClydeMailFilter" >
        <property name="contextLocator" ref="root.context.locator"/>
    </bean>

    <bean id="mail.sender.smtp" class="com.ettrema.mail.send.RemoteSmtpMailSender">
        <constructor-arg value="${mail.smtp.host}"/>
        <constructor-arg value="${mail.smtp.user}"/>
        <constructor-arg value="${mail.smtp.password}"/>
        <constructor-arg value="${mail.smtp.port}"/>
    </bean>


    <bean id="mail.sender.mock" class="com.ettrema.mail.send.MockMailSender"></bean>
    
    <bean id="mail.sender.aspirin" class="com.ettrema.mail.send.AspirinMailSender"></bean>

    <bean id="mail.receiver.smtp" class="com.ettrema.mail.receive.SubethaSmtpServer">
        <constructor-arg value="${mail.server.smtp.port}"/>
        <constructor-arg value="false"/>
        <constructor-arg ref="mail.resource.factory"/>
        <constructor-arg>
            <list>
                <ref bean="mail.filter"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="mail.server" class="com.ettrema.mail.MailServer">
        <constructor-arg ref="${mail.sender}"/>
        <constructor-arg ref="mail.receiver.smtp"/>

        <constructor-arg >
            <null/>
        </constructor-arg>
    </bean>
    
    <bean id="mail.server.service" class="com.ettrema.berry.GenericService">
        <constructor-arg ref="mail.server"/>
    </bean>
    
    <bean id="retrying.mail.sender" class="com.ettrema.web.mail.RetryingMailService">
        <constructor-arg ref="${mail.sender}" />
    </bean>

    <bean id="vfs.helper" class="com.ettrema.web.VfsHelper"/>

    <bean id="ctx.jdbc" class="com.ettrema.context.CtxJdbcConnectionFactory">
        <constructor-arg value="${db.url}"/>
        <constructor-arg value="${db.user}"/>
        <constructor-arg value="${db.password}"/>
        <constructor-arg value="${db.driver}"/>
        <property name="minIdle" value="0"/>
        <property name="poolPreparedStatements" value="true"/>
    </bean>

    <bean id="resource.creator" class="com.ettrema.web.creation.PluggableResourceCreator">
        <property name="extraCreators">
            <list>
                <bean class="com.ettrema.web.calendar.CalendarCreator" />
            </list>
        </property>
    </bean>

    <bean id="template.manager.base" class="com.ettrema.web.templates.TemplateManagerImpl"/>

    <bean id="template.manager.underlays" class="com.ettrema.web.templates.UnderlayTemplateManager">
        <constructor-arg  ref="underlay.locator" />
        <constructor-arg  ref="template.manager.base" />
    </bean>

    <bean id="template.manager" class="com.ettrema.web.templates.RelativeTemplateManager">
        <constructor-arg ref="template.manager.underlays"/>
    </bean>

    <bean id="base.binary.service" class="com.ettrema.binary.DefaultClydeBinaryService"/>

    <bean id="clyde.binary.service" class="com.ettrema.binary.VersioningBinaryManagerService">
        <constructor-arg ref="base.binary.service"/>
    </bean>

    <bean id="event.manager" class="com.ettrema.event.EventManagerImpl"/>

    <bean id="recent.manager" class="com.ettrema.web.recent.RecentManager">
        <constructor-arg ref="event.manager"/>
        <constructor-arg ref="current.user.service"/>		
    </bean>

    <bean id="current.user.service" class="com.ettrema.web.security.HttpCurrentUserService"/>

    <bean id="current.request.service" class="com.ettrema.utils.CurrentRequestService"/>

    <bean id="request.service" class="com.ettrema.utils.RequestService">
        <constructor-arg ref="current.request.service"/>
    </bean>

    <bean id="href.service" class="com.ettrema.utils.HrefService">
        <constructor-arg ref="request.service"/>
    </bean>

    <bean id="default.redirect.service" class="com.ettrema.utils.DefaultRedirectService"/>

    <bean id="folder.redirect.service" class="com.ettrema.utils.FolderRedirectService">
        <property name="redirectPage" value="index.html" />
    </bean>

    <bean id="redirect.service" class="com.ettrema.utils.MultiRedirectService">
        <constructor-arg>
            <list>
                <ref bean="default.redirect.service"/>
                <ref bean="folder.redirect.service"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="child.finder" class="com.ettrema.web.children.DefaultChildFinder"/>
    
    <bean id="search.indexing.listener" class="com.ettrema.web.search.SearchIndexingCommitListener">
        <constructor-arg ref="vfs.provider.postgres"/>
        <constructor-arg ref="asynch.proc"/>
    </bean>
    
    <bean id="search.directory.factory" class="com.ettrema.web.search.DefaultDirectoryFactory">
        <constructor-arg value="${search.dir}"/>
    </bean>  
    
    <bean id="search.index.manager" class="com.ettrema.web.search.SearchManager">
        <constructor-arg ref="search.directory.factory"/>
    </bean>    
    
    <bean id="thumb.selector" class="com.ettrema.thumbs.ThumbSelector"/>

    <bean id="thumb.generator.service" class="com.ettrema.media.ThumbGeneratorService">
        <constructor-arg ref="vfs.provider.postgres"/>
        <constructor-arg ref="event.manager"/>
        <constructor-arg ref="thumbs.processor"/>
        <constructor-arg ref="asynch.proc"/>
        <constructor-arg ref="flash.service"/>
        <property name="mediaLogService" ref="media.log.service"/>
    </bean>

    <bean id="flash.service" class="com.ettrema.video.FlashService">
        <property name="mediaLogService" ref="media.log.service"/>
        <property name="ffmpegProcess" value="${ffmpeg.process}"/>
    </bean>

    <bean id="image.service" class="com.ettrema.web.image.HiQualityImageService">
        <constructor-arg value="${image.working.dir}"/>
    </bean>

    <bean id="thumb.href.service" class="com.ettrema.media.MediaThumbHrefService">
        <property name="prefixWithHost" value="false"/>
        <property name="rootPrefix" value=""/>
    </bean>

    <bean id="group.service" class="com.ettrema.web.groups.RelationalGroupHelper" >
        <constructor-arg ref="permissionChecker"/>
    </bean>

    <bean id="password.validation.service" class="com.ettrema.web.security.RegexPasswordValidationService">
        <constructor-arg>
            <bean class="com.ettrema.web.security.SimplePasswordValidationService"/>
        </constructor-arg>
    </bean>

    <bean id="password.storage.service" class="com.ettrema.web.security.PasswordStorageService">
        <constructor-arg ref="password.validation.service" />
    </bean>

    <bean id="current.date.service" class="com.ettrema.utils.MutableCurrentDateService"/>

    <bean id="formatter" class="com.ettrema.web.Formatter">
        <constructor-arg ref="current.date.service" />
    </bean>

    <bean id="thumbs.processor" class="com.ettrema.media.ImageServiceThumbProcessor">
        <constructor-arg ref="image.service" />
    </bean>
	
    <bean id="user.locator" class="com.ettrema.web.security.UserLocator"/>
    
    <bean id="state.token.manager" class="com.ettrema.binary.StateTokenManager">
        <constructor-arg ref="event.manager" />
    </bean>

    <bean id="comment.dao" class="com.ettrema.web.comments.CommentDao">
    </bean>
    
    <bean id="comment.service" class="com.ettrema.web.comments.CommentServiceImpl">
        <constructor-arg ref="current.user.service" />
        <constructor-arg ref="current.date.service" />
        <constructor-arg ref="comment.dao" />
    </bean>

    <bean id="endrick.catalog" class="com.ettrema.context.FactoryCatalog">
        <!--
        <property name="configFile" value="applicationContext.xml"/>
        -->
        <property name="factories">
            <list>
                <bean class="com.ettrema.context.date.CtxDateFormatFactory"/>
                <ref bean="ctx.jdbc"/>
                <bean class="com.ettrema.vfs.CtxVfsManagerFactory"/>
                <bean class="com.ettrema.vfs.CtxVfsSessionFactory" />
                <bean class="com.ettrema.context.SingletonFactory">
                    <property name="bean" ref="template.manager"/>
                </bean>

                <bean class="com.ettrema.context.SingletonFactory">
                    <property name="bean" ref="existing.resource.factory"/>
                </bean>

                <bean class="com.ettrema.context.SingletonFactory">
                    <property name="bean" ref="${mail.sender}"/>
                </bean>

                <bean class="com.ettrema.context.SingletonFactory">
                    <property name="bean" ref="mail.server"/>
                </bean>

                <bean class="com.ettrema.context.SingletonFactory">
                    <property name="bean" ref="vfs.provider.postgres"/>
                </bean>

                <bean class="com.ettrema.context.SingletonFactory">
                    <property name="bean" ref="mail.filter"/>
                </bean>

                <bean class="com.ettrema.context.SingletonFactory">
                    <property name="bean" ref="authenticator"/>
                </bean>

                <bean class="com.ettrema.context.SingletonFactory">
                    <property name="bean" ref="authoriser"/>
                </bean>

                <bean class="com.ettrema.context.SingletonFactory">
                    <property name="bean" ref="binary.manager"/>
                </bean>

                <bean class="com.ettrema.context.BeanFactory">
                    <property name="beanClass" value="com.ettrema.web.captcha.CaptchaServiceImpl"/>
                </bean>

                <bean class="com.ettrema.context.BeanFactory">
                    <property name="beanClass" value="com.ettrema.web.mail.MailProcessorImpl"/>
                </bean>
                <bean class="com.ettrema.context.BeanFactory">
                    <property name="beanClass" value="com.ettrema.web.mail.MimeMessageParserImpl"/>
                </bean>
                <bean class="com.ettrema.context.BeanFactory">
                    <property name="beanClass" value="com.ettrema.web.mail.GroupMessageSenderImpl"/>
                </bean>
                <bean class="com.ettrema.context.BeanFactory">
                    <property name="beanClass" value="com.ettrema.web.mail.VelocityTemplater"/>
                </bean>

                <bean class="com.ettrema.context.SingletonFactory">
                    <property name="bean" ref="resource.creator"/>
                </bean>
                
                <bean class="com.ettrema.media.ClydeMediaService"/>
            </list>
        </property>
        <property name="singletons">
            <list>	                  
                <ref local="search.index.manager"/>
                <bean class="com.ettrema.web.relations.RelationsHelper"/>
                <ref local="retrying.mail.sender"/>
                <ref local="state.token.manager"/>
                <ref bean="user.locator"/>
                <ref bean="form.processor"/>
                <ref bean="root.context.locator"/>
                <ref bean="migration.helper"/>
                <ref local="formatter"/>
                <ref local="current.date.service"/>
                <ref local="clyde.timer.service" />
                <ref bean="password.storage.service" />
                <bean class="com.ettrema.web.captcha.ReCaptchaService"/>
                <ref bean="password.validation.service" />
                <bean class="com.ettrema.web.security.MemoryPasswordRecoveryService"/>
                <ref bean="asynch.proc" />
                <ref bean="permissionChecker"/>
                <bean class="com.ettrema.web.csv.CsvService">
                    <constructor-arg ref="formatter" />
                </bean>                
                <ref bean="comment.service"/>
                <ref bean="cookie.auth.handler"/>
                <ref bean="event.dispatcher"/>
                <ref bean="current.request.service"/>
                <ref bean="clyde.binary.service"/>
                <ref bean="event.manager"/>
<!--
                <ref bean="recent.manager"/>
-->
                <ref bean="current.user.service"/>
                <ref bean="href.service"/>
                <ref bean="redirect.service"/>
                <ref bean="authoring.permission.service" />
                <ref bean="child.finder"/>
                <bean class="com.ettrema.web.locking.ClydeLockManagerImpl">
                    <constructor-arg ref="current.user.service"/>
                </bean>
                <bean class="com.ettrema.web.creation.NameIdCreatorService">
                    <constructor-arg>
                        <bean class="com.ettrema.web.creation.RelationshipCreatorService"/>
                    </constructor-arg>
                </bean>
                <ref bean="thumb.selector"/>
                <ref bean="thumb.generator.service"/>
                <ref bean="flash.service" />
                <ref bean="image.service" />
                <ref local="thumbs.processor"/>
                <ref bean="thumb.href.service"/>
                <ref bean="group.service"/>
                <ref bean="media.log.service"/>
                <ref bean="asynch.proc"/>
            </list>
        </property>
    </bean>

    <bean id="endrick.root.context" class="com.ettrema.context.RootContext" destroy-method="shutdown">
        <constructor-arg ref="endrick.catalog"/>
        <constructor-arg>
            <list/>
        </constructor-arg>
        <property name="rootContextLocator" ref="root.context.locator"/>
    </bean>

    <bean id="endrick.stop.service" class="com.ettrema.berry.CloseableService">
        <constructor-arg ref="endrick.root.context"/>
    </bean>


    <bean id="clyde.app" class="com.ettrema.web.ClydeApp">
        <constructor-arg ref="endrick.root.context"/>
        <constructor-arg ref="milton.http.manager"/>
        <constructor-arg value="false" /> <!-- disable stats-->
    </bean>



<!--
Use this when you want a new database to be initialised with a root host
on app start up. This will only create if it doesnt exist, so is safe to leave it
in the config on subsequent restarts
-->
    <bean id="endrick.table.defs" class="com.ettrema.vfs.PostgresTableCreator"/>

    <bean id="table.creator" class="com.ettrema.db.TableCreatorService">
        <constructor-arg ref="endrick.root.context"/>
        <constructor-arg>
            <list>
                <ref bean="endrick.table.defs"/>
                <ref bean="media.log.service"/>
                <ref bean="recent.manager"/>
                <ref bean="comment.dao"/>                
            </list>
        </constructor-arg>
        <constructor-arg>
            <bean class="${db.dialect}"/>
        </constructor-arg>
    </bean>
   
</beans>
